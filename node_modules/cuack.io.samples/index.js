/**
 * @overview 
 * @author Daniel Goberitz <dalgo86@gmail.com>
 */

var cuackIO = require('cuack.io'),
	util = require('util'),
	os = require('os')
;

function ChatRoom(){
	cuackIO.Room.apply(this, arguments);
}

util.inherits(ChatRoom, cuackIO.Room);

// Add talk event to emit directly to broadcast from clientSide
ChatRoom.prototype.options.broadcastEventsAllowed.push('talk');

ChatRoom.prototype.onConnect = function(socket){
	console.log('@@ new User on room', this.name, ' with id ', socket.id);
}

ChatRoom.prototype.rpcCreatePrivateTalk = function(socket, response, otherUserId){
	var roomName, created;
	
	created = this.server.createRoom(ChatRoom, {
		name: (roomName = 'priv_' + socket.id + '_' + otherUserId)
	});
	
	response({
		created: created,
		name: roomName
	});
	
	this.getClient(otherUserId).emit('joinTo', roomName);
}

ChatRoom.prototype.rpcGetOsSystem = function(socket, response){
//console.log('// ChatRoom::rpcGetOsSystem ///////////////////////////////////');
//console.log(arguments);
//console.log('\\\\ ChatRoom::rpcGetOsSystem \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\');
	
	var osString = os.type() + ' ' + os.platform();

	response(osString);
}

ChatRoom.prototype.rpcSayMe = function(socket, response, message){
	var args = Array.prototype.slice.call(arguments, 2);
	response(args.join(' '));
}


module.exports.ChatRoom = ChatRoom;
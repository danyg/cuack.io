/**
 * @overview 
 * @author Daniel Goberitz <dalgo86@gmail.com>
 */

var socketIO = require('socket.io'),
	Room = require('./Room')
;

/**
 * Attaches a manager
 *
 * @param {HTTPServer/Number} server a HTTP/S server or a port number to listen on.
 * @param {Object} options opts to be passed to Manager and/or http server
 * @param {Function} fn callback if a port is supplied
 * @api public
 */
function ServerSocket(server, options, fn){
	this.clients = {};
	this.clientsByRoom = {};
	
	
	var roomHandlerConstructor = Room, roomOptions = {};
	if(undefined !== options && options.roomHandlerConstructor){
		roomHandlerConstructor = options.roomHandlerConstructor;
		delete options.roomHandlerConstructor;
	}
	if(undefined !== options && options.roomOptions){
		roomOptions = options.roomOptions;
		delete options.roomOptions;
	}

	this.io = socketIO.listen(server,options,fn);
	this.rooms = {};
	
	this.createRoom(roomHandlerConstructor, roomOptions);
}

/**
 * @return {Boolean}
 */
ServerSocket.prototype.createRoom = function(RoomHandlerConstructor, options){
	var roomInstance = new RoomHandlerConstructor(this, options);
	if(!this.roomExists( roomInstance.getName() )){
		this.clientsByRoom[roomInstance.getName()] = {};
		this.addRoom( roomInstance.getName(), roomInstance);
		roomInstance.create();

		return true;
	}else{
		return false;
	}
}

/**
 * @return {Boolean}
 */
ServerSocket.prototype.roomExists = function(roomName){
	return undefined !== this.rooms[ roomName ];
}

/**
 * @throwable
 */
ServerSocket.prototype.addRoom = function(roomName, roomInstance){
	if(!this.roomExists(roomName)){
		var me = this;
		roomInstance.on('newClient', function(socket){
			me.clients[socket.id] = socket;
			me.clientsByRoom[roomName][socket.id] = socket;
		});
		roomInstance.on('clientOut', function(socket){
			delete me.clients[socket.id]
			delete me.clientsByRoom[roomName][socket.id];
		});
		
console.log('NEW ROOM ADDED: ' + roomName);
		
		this.rooms[ roomName ] = roomInstance;
	}else{
		throw roomName + ' already exists!';
	}
}

ServerSocket.prototype.getClient = function(id){
	if(this.clients[id]){
		return this.clients[id];
	}else{
		return false;
	}
}

ServerSocket.prototype.getRoomBroadcaster = function(roomName){
	var id,socket;
	if(undefined === roomName){
		roomName = '#default';
	}
	if(undefined !== this.clientsByRoom[roomName]){
		for(id in this.clientsByRoom[roomName]){
			socket = this.clientsByRoom[roomName][id];
			break;
		}

		if(socket){
			return socket.broadcast;
		}else{
			console.error('there is not socket')
			return false;
		}
	}else{
		throw 'The room ' + roomName + ' do not exists!';
	}
}

/**
 * @throwable
 * @return {Room}
 */
ServerSocket.prototype.getRoom = function(roomName){
	if(this.roomExists(roomName)){
		return this.rooms[ roomName ];
	}else{
		throw roomName + ' is not exists!';
	}
}


/**
 * @desc Devuelve una lista de roomNames
 * @return {String[]}
 */
ServerSocket.prototype.getRoomsList = function(){
	var roomName,
		list = []
	;
	for(roomName in this.rooms){
		if(this.rooms.hasOwnProperty(roomName)){
			list.push(roomName);
		}
	}
	
	return list;
}


module.exports = ServerSocket;